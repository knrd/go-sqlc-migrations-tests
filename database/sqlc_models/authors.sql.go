// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: authors.sql

package sqlc_models

import (
	"context"
)

const authorsGetAll = `-- name: AuthorsGetAll :many
SELECT id, name, email, created_at FROM authors
`

func (q *Queries) AuthorsGetAll(ctx context.Context) ([]Author, error) {
	rows, err := q.db.QueryContext(ctx, authorsGetAll)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Author
	for rows.Next() {
		var i Author
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Email,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const authorsInsert = `-- name: AuthorsInsert :exec
INSERT INTO authors (name, email, created_at)
VALUES ($2, $1, NOW())
`

type AuthorsInsertParams struct {
	Email string
	Name  string
}

func (q *Queries) AuthorsInsert(ctx context.Context, arg AuthorsInsertParams) error {
	_, err := q.db.ExecContext(ctx, authorsInsert, arg.Email, arg.Name)
	return err
}
