// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: operations.sql

package sqlc_models

import (
	"context"
	"time"
)

const balanceGetByEmail = `-- name: BalanceGetByEmail :one
SELECT id, amount, email, created_at FROM balances WHERE email=$1
`

func (q *Queries) BalanceGetByEmail(ctx context.Context, email string) (Balance, error) {
	row := q.db.QueryRowContext(ctx, balanceGetByEmail, email)
	var i Balance
	err := row.Scan(
		&i.ID,
		&i.Amount,
		&i.Email,
		&i.CreatedAt,
	)
	return i, err
}

const balanceInsert = `-- name: BalanceInsert :exec
INSERT INTO balances (amount, email, created_at)
VALUES ($1, $2, $3)
`

type BalanceInsertParams struct {
	Amount    int32
	Email     string
	CreatedAt time.Time
}

func (q *Queries) BalanceInsert(ctx context.Context, arg BalanceInsertParams) error {
	_, err := q.db.ExecContext(ctx, balanceInsert, arg.Amount, arg.Email, arg.CreatedAt)
	return err
}

const balanceLogInsert = `-- name: BalanceLogInsert :exec
INSERT INTO balance_logs (balance_id, change, note, created_at)
VALUES ($1, $2, $3, $4)
`

type BalanceLogInsertParams struct {
	BalanceID int32
	Change    int32
	Note      string
	CreatedAt time.Time
}

func (q *Queries) BalanceLogInsert(ctx context.Context, arg BalanceLogInsertParams) error {
	_, err := q.db.ExecContext(ctx, balanceLogInsert,
		arg.BalanceID,
		arg.Change,
		arg.Note,
		arg.CreatedAt,
	)
	return err
}

const balancesGetAll = `-- name: BalancesGetAll :many
SELECT id, amount, email, created_at FROM balances
`

func (q *Queries) BalancesGetAll(ctx context.Context) ([]Balance, error) {
	rows, err := q.db.QueryContext(ctx, balancesGetAll)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Balance
	for rows.Next() {
		var i Balance
		if err := rows.Scan(
			&i.ID,
			&i.Amount,
			&i.Email,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
